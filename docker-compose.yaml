version: "3.8"

networks:
  els:
    driver: bridge

services:
  # Первоначальные настройки ES
  setup:
    image: elasticsearch:${ELASTIC_VERSION}
    user: "0"
    # Ждем запуска ES
    # Устанавливаем пароль для пользователя kibana_system, logstash_system
    # Создаем группу logstash_manage
    # Создаем пользователя ${LOGSTASH_ADMIN_USER}
    command:
      - bash
      - -c
      - |
        echo "Waiting for Elasticsearch"
        until curl -s ${ELASTIC_URL} | grep -q "missing authentication credentials"
        do
          sleep 10
        done

        echo "Setting kibana_system password"
        until curl -s -X POST \
                    -H "Content-Type: application/json" \
                    -u "elastic:${ELASTIC_PASSWORD}" \
                    ${ELASTIC_URL}/_security/user/kibana_system/_password \
                    -d '{"password":"${KIBANA_PASSWORD}"}' | grep -q "^{}"
        do sleep 10; done

        echo "Setting logstash_system password"
        until curl -s -X POST \
                    -H "Content-Type: application/json" \
                    -u "elastic:${ELASTIC_PASSWORD}" \
                    ${ELASTIC_URL}/_security/user/logstash_system/_password \
                    -d '{"password":"${LOGSTASH_PASSWORD}"}' | grep -q "^{}"
        do sleep 10; done

        until ! curl -s -u "elastic:${ELASTIC_PASSWORD}" ${ELASTIC_URL}/_security/role/logstash_manage | grep -q "^{}"
        do
          echo "Creating logstash_manage role"
          curl -s -X POST \
                -H "Content-Type: application/json" \
                -u "elastic:${ELASTIC_PASSWORD}" \
                ${ELASTIC_URL}/_security/role/logstash_manage \
                -d '{"cluster": ["manage_index_templates", "monitor", "manage_ilm"], "indices": [{"names": ["logs_*"], "privileges": ["all"]}]}' \
                >/dev/null
          sleep 10
        done
        
        until ! curl -s -u "elastic:${ELASTIC_PASSWORD}" ${ELASTIC_URL}/_security/user/logstash_admin | grep -q "^{}"
        do
          echo "Creating ${LOGSTASH_ADMIN_USER} user"
          curl -s -X POST \
                -H "Content-Type:application/json" \
                -u "elastic:${ELASTIC_PASSWORD}" \
                ${ELASTIC_URL}/_security/user/${LOGSTASH_ADMIN_USER} \
                -d '{"password":"${LOGSTASH_ADMIN_PASSWORD}", "roles":["logstash_admin", "logstash_system", "logstash_manage"]}' \
                >/dev/null
          sleep 10
        done

        echo "Done"
    networks:
      - els

  # Сервис Elasticsearch
  elasticsearch:
    image: elasticsearch:${ELASTIC_VERSION}
    container_name: elasticsearch
    environment:
      #Конфигурация JVM
      - ES_JAVA_OPTS=-Xmx512m -Xms512m
      # Режим кластера (single-node)
      - discovery.type=single-node
      # Имя ноды
      - node.name=elasticsearch
      # Название кластера
      - cluster.name=els
      - xpack.security.enabled=true
      - xpack.license.self_generated.type=basic
      # Пароль пользователя elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - ${VOLUMES_PATH}/elasticsearch/data:/usr/share/elasticsearch/data
    restart: always
    networks:
      - els
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200 | grep -q 'missing authentication credentials'"]
      interval: 10s
      timeout: 10s
      retries: 15
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 600M

  # Сервис Kibana
  kibana:
    image: kibana:${ELASTIC_VERSION}
    container_name: kibana
    environment:
      # Имя сервера
      - server.name=kibana
      # Имя пользователя в кластере Elasticsearch
      - ELASTICSEARCH_USERNAME=kibana_system
      # Пароль пользователя
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      # Хосты Elasticsearch
      - ELASTICSEARCH_HOSTS=${ELASTIC_URL}
      # Для отображения загрузки ЦП контейнером
      - monitoring.ui.container.elasticsearch.enabled=true
    restart: always
    ports:
      - "5601:5601"
    networks:
      - els
    depends_on:
      elasticsearch:
        condition: service_healthy
      setup:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"]
      interval: 10s
      timeout: 10s
      retries: 15
      start_period: 30s

  # Сервис Logstash
  # Используется для обработки и передачи логов в Elasticsearch
  logstash:
    image: logstash:${ELASTIC_VERSION}
    container_name: logstash
    environment:
      #Конфигурация JVM
      - LS_JAVA_OPTS=-Xmx512m -Xms512m
      # Имя пользователя в кластере Elasticsearch (для конфигурирования файла logstash.yml)
      - xpack.monitoring.elasticsearch.username=logstash_system
      # Пароль пользователя (для конфигурирования файла logstash.yml)
      - xpack.monitoring.elasticsearch.password=${LOGSTASH_PASSWORD}
      # Имя пользователя в кластере Elasticsearch (для pipeline)
      - ES_USER=${LOGSTASH_ADMIN_USER}
      # Пароль пользователя (для pipeline)
      - ES_PASSWORD=${LOGSTASH_ADMIN_PASSWORD}
      # Хосты Elasticsearch
      - ELASTICSEARCH_HOSTS=${ELASTIC_URL}
    volumes:
      - ./configs/logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml:ro
      - ./configs/logstash/pipelines:/usr/share/logstash/pipeline:ro
    restart: always
    ports:
      - "9600:9600"
      - "5044:5044"
    networks:
      - els
    depends_on:
      elasticsearch:
        condition: service_healthy
      setup:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 600M
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9600 | grep -q 'green'"]
      interval: 10s
      timeout: 10s
      retries: 15
      start_period: 30s

  # Сервис Filebeat
  # Используется для передачи логов в Logstash
  beats:
    image: elastic/filebeat:${ELASTIC_VERSION}
    command: filebeat -e -strict.perms=false
    volumes:
      - ./configs/filebeat/config.yml:/usr/share/filebeat/filebeat.yml:ro
      - ${VOLUMES_PATH}/filebeat:/metrics:ro
    restart: always
    networks:
      - els
    depends_on:
      logstash:
        condition: service_healthy